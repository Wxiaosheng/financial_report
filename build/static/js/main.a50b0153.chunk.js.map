{"version":3,"sources":["pages/Home/index.jsx","components/ResultBox/index.jsx","pages/DataHandle/Name/index.jsx","router/index.jsx","pages/Main/MainContent.jsx","pages/Main/MainSider.jsx","pages/Main/index.jsx","serviceWorker.js","index.js"],"names":["Home","className","Component","ResultBox","content","this","props","TextArea","DataHandleName","state","result","chengeData","bind","form","validateFieldsAndScroll","err","values","dataName","formatName","console","log","setState","join","sting","split","map","name","length","message","warning","getFieldDecorator","span","Item","label","rows","type","block","onClick","style","height","create","Routers","exact","path","component","to","Content","MainContent","SubMenu","Sider","MainSider","mode","defaultSelectedKeys","defaultOpenKeys","borderRight","key","title","Header","Main","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kZAIqBA,G,wLAEjB,OAAO,6BAEL,yBAAKC,UAAU,WAAf,iF,GAJ4BC,c,+FCAbC,G,wLACR,IACDC,EAAYC,KAAKC,MAAjBF,QACR,OAAO,yBAAKH,UAAU,cACpB,yBAAKA,UAAU,cAAgBG,GAAoB,2E,GAJlBF,cCE/BK,G,WAAAA,UAEFC,E,YACJ,WAAaF,GAAQ,IAAD,8BAClB,4CAAMA,KAEDG,MAAO,CACVC,OAAQ,IAGV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAPA,E,0EAWL,IAAD,OACZP,KAAKC,MAAMO,KAAKC,yBAAwB,SAACC,EAAKC,GAAY,IAChDC,EAAaD,EAAbC,SAEFP,EAAS,EAAKQ,WAAWD,GAC/BE,QAAQC,IAAIV,GAEZ,EAAKW,SAAS,CAAEX,OAAQA,EAAOY,KAAK,a,iCAK5BC,GACV,OAAKA,EAIEA,EAAMC,MAAM,MAAMC,KAAI,SAAAC,GAC3B,IAAMhB,EAASgB,EAAKF,MAAM,wCAC1B,OAAOd,EAAOA,EAAOiB,OAAS,MALtBC,EAAA,EAAQC,QAAQ,mE,+BASjB,IACDnB,EAAWL,KAAKI,MAAhBC,OACAoB,EAAsBzB,KAAKC,MAAMO,KAAjCiB,kBAER,OAAO,yBAAK7B,UAAU,oBACpB,yBAAKA,UAAU,cAAf,kCACA,uBAAK8B,KAAO,GACV,2BACE,sBAAMC,KAAN,CAAWC,MAAM,4BACbH,EAAkB,WAAY,GAA9BA,CAAkC,kBAACvB,EAAD,CAAU2B,KAAM,SAI1D,uBAAKH,KAAO,IACZ,uBAAKA,KAAO,GACV,uBAAQI,KAAK,UAAUC,OAAK,EAACC,QAAShC,KAAKM,YAA3C,iBAEF,uBAAKoB,KAAO,IACZ,uBAAKA,KAAO,EAAIO,MAAO,CAAEC,OAAQ,QAC/B,kBAAC,EAAD,CAAWnC,QAASM,U,GAtDCR,aA4Dd,MAAKsC,QAAL,CAAchC,GC9DRiC,E,iLAEjB,OAAO,kBAAC,IAAD,KACL,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IACjC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,oBAAoBC,UAAWpC,IACjD,kBAAC,IAAD,CAAUqC,GAAG,W,GALkB3C,aCF7B4C,E,IAAAA,QAEaC,E,iLAEjB,OAAO,kBAACD,EAAD,CAAS7C,UAAU,gBACxB,kBAAC,EAAD,W,GAHmCC,a,iCCDjC8C,E,IAAAA,QACAC,E,IAAAA,MAEaC,E,iLAEjB,OAAO,kBAACD,EAAD,CAAOhD,UAAU,mBACxB,uBACEkD,KAAK,SACLC,oBAAqB,CAAC,QACtBC,gBAAiB,CAAC,eAClBf,MAAO,CAAEC,OAAQ,OAAQe,YAAa,IAEtC,kBAACN,EAAD,CACEO,IAAI,cACJC,MAAQ,8BAAM,uBAAMrB,KAAK,WAAjB,6BAER,sBAAMH,KAAN,CAAWuB,IAAI,QACb,kBAAC,IAAD,CAAMV,GAAG,qBAAT,oC,GAd6B3C,aCA/BuD,G,WAAAA,QAEaC,E,iLAEjB,OAAO,yBAAKzD,UAAU,aACpB,kBAAC,IAAD,KACE,2BACE,kBAACwD,EAAD,CAAQxD,UAAU,oBAAlB,oDACA,2BACE,kBAAC,EAAD,MACA,uBAAQqC,MAAO,CAAEqB,QAAS,SACxB,kBAAC,EAAD,e,GAToBzD,aCEd0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a50b0153.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport './style.css'\n\nexport default class Home extends Component {\n  render () {\n    return <div>\n\n      <div className='welcome' >欢迎使用财报数据管理后台</div>\n    </div>\n  }\n}","import React, { Component } from 'react'\n\nimport './style.css'\n\nexport default class ResultBox extends Component {\n  render () {\n    const { content } = this.props\n    return <div className='result_box'>\n      <pre className='result_box' >{ content ? content : '请点击转换按钮得到结果' }</pre>\n    </div>\n  }\n}","import React, { Component } from 'react'\nimport { Col, Form, Input, Button, message } from 'antd'\nimport ResultBox from 'components/ResultBox/'\n\nimport './style.css'\n\nconst { TextArea } = Input;\n\nclass DataHandleName extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state ={\n      result: ''\n    }\n\n    this.chengeData = this.chengeData.bind(this)\n  }\n\n  // 转换按钮\n  chengeData () {\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      const { dataName } = values\n\n      const result = this.formatName(dataName)\n      console.log(result)\n\n      this.setState({ result: result.join('\\n') })\n    })\n  }\n\n  // 格式化姓名\n  formatName (sting) {\n    if (!sting) {\n      return  message.warning('请输入要转换的内容！ ')\n    }\n\n    return sting.split('\\n').map(name => {\n      const result = name.split(/\\-|\\一|\\–|\\_|－|—/g)\n      return result[result.length - 1]\n    })\n  }\n\n  render () {\n    const { result } = this.state\n    const { getFieldDecorator } = this.props.form\n\n    return <div className='data_handle_name' >\n      <div className='page_title' >姓名格式化</div>\n      <Col span={ 8 }>\n        <Form>\n          <Form.Item label='模板名称'>\n            { getFieldDecorator('dataName', {})(<TextArea rows={20} />) }\n          </Form.Item>\n        </Form>\n      </Col>\n      <Col span={ 2 } />\n      <Col span={ 4 }>\n        <Button type='primary' block onClick={this.chengeData}>转换</Button>\n        </Col>\n      <Col span={ 2 }/>\n      <Col span={ 8 } style={{ height: '90%' }}>\n        <ResultBox content={result} />\n      </Col>\n    </div>\n  }\n}\n\nexport default Form.create()(DataHandleName)","import React, { Component } from 'react'\nimport { Switch, Route, Redirect } from \"react-router-dom\"\n\nimport Home from 'pages/Home/'\nimport DataHandleName from 'pages/DataHandle/Name'\n\nexport default class Routers extends Component {\n  render () {\n    return <Switch>\n      <Route exact path='/' component={Home} />\n      <Route exact path='/data_handle/name' component={DataHandleName} />\n      <Redirect to='/' />\n    </Switch>\n  }\n}","import React, { Component } from 'react'\nimport { Layout } from 'antd'\nimport Router from 'router/'\n\nconst { Content } = Layout\n\nexport default class MainContent extends Component {\n  render () {\n    return <Content className='main_content'>\n      <Router />\n    </Content>   \n  }\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Layout, Menu, Icon } from 'antd'\n\n\nconst { SubMenu } = Menu\nconst { Sider } = Layout\n\nexport default class MainSider extends Component {\n  render () {\n    return <Sider className='page_main_sider'>\n    <Menu\n      mode='inline'\n      defaultSelectedKeys={['name']}\n      defaultOpenKeys={['data_handle']}\n      style={{ height: '100%', borderRight: 0 }}\n    >\n      <SubMenu\n        key='data_handle'\n        title={ <span><Icon type='laptop' />数据处理</span> }\n      >\n        <Menu.Item key='name'>\n          <Link to='/data_handle/name' >姓名处理</Link>\n        </Menu.Item>\n      </SubMenu>\n    </Menu>\n  </Sider>\n  }\n}","import React, {  Component } from 'react'\nimport { HashRouter } from \"react-router-dom\"\nimport { Layout } from 'antd'\nimport MainContent from './MainContent'\nimport MainSider from './MainSider'\n\nimport './style.css'\n\nconst { Header } = Layout\n\nexport default class Main extends Component {\n  render () {\n    return <div className='page_main' > \n      <HashRouter>\n        <Layout>\n          <Header className='page_main_header'>财报数据管理后台</Header>\n          <Layout>\n            <MainSider />\n            <Layout style={{ padding: '24px' }}>\n              <MainContent />\n            </Layout>\n          </Layout>\n        </Layout>\n      </HashRouter>\n    </div>\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from 'pages/Main/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}